// @ts-check

// BEGIN (write your solution here)

export default class Node {
  constructor(key = null, left = null, right = null) {
    this.key = key;
    this.left = left;
    this.right = right;
  }

  getKey() {
    return this.key;
  }

  getLeft() {
    return this.left;
  }

  getRight() {
    return this.right;
  }

  search(key) {
    if (this.getKey() === key) {
      return this;
    }
    if (this.getKey() > key) {
      return this.getLeft()?.search(key) ?? null;
    }
    return this.getRight()?.search(key) ?? null;
  }
}

// END
/* Node.js
Двоичное дерево поиска состоит из узлов, каждый из которых содержит значение
ключа и два поддерева (левое и правое), которые в свою очередь также являются
двоичными деревьями. Правильное дерево не содержит повторяющихся ключей,
и для каждого узла гарантируется, что в левом поддереве все значения меньше текущего,
а в правом — больше.

Двоичное дерево поиска

Реализуйте и экспортируйте по умолчанию класс, который реализует представление узла.
Конструктор класса принимает на вход значение ключа (число), и двух детей, которые в
свою очередь также являются узлами. Дерево может быть создано пустым.

Класс должен содержать методы:

Геттер getKey() — возвращает ключ. Если дерево пустое, возвращает null.
Геттеры getLeft(), getRight() — возвращают соответственно левого и правого ребёнка.
Если ребёнок в узле отсутствует, геттер возвращает null.
search(key) — выполняет поиск узла в правильном двоичном дереве по ключу и возвращает узел.
Если узел не найден, возвращается null. */
